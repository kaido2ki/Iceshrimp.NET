@using Iceshrimp.Frontend.Localization
@using Iceshrimp.Shared.Schemas.Web
@using Microsoft.Extensions.Localization
@using Iceshrimp.Assets.PhosphorIcons
@using Iceshrimp.Frontend.Core.Miscellaneous
@using Iceshrimp.Frontend.Core.Services
@inject ApiService                     Api;
@inject IJSRuntime                     Js;
@inject IStringLocalizer<Localization> Loc;
@inject NavigationManager              Nav;

@if (File != null && Folder == null)
{
    <div @ref="FileButton" class="drive-entry" @onclick="SelectFile" @onclick:stopPropagation="true">
        <div class="labels">
            @if (File.IsAvatar)
            {
                <Icon Name="Icons.UserCircle" title="@Loc["Avatar"]"/>
            }
            @if (File.IsBanner)
            {
                <Icon Name="Icons.Image" title="@Loc["Banner"]"/>
            }
            @if (File.Description != null)
            {
                <Icon Name="Icons.ClosedCaptioning" title="@File.Description"/>
            }
            else
            {
                <Icon Name="Icons.Warning" title="@Loc["No alt text"]"/>
            }
            @if (File.Sensitive)
            {
                <Icon Name="Icons.EyeSlash" title="@Loc["Sensitive"]"/>
            }
        </div>
        @if (File.ContentType.StartsWith("image"))
        {
            <img class="thumbnail" src="@File.ThumbnailUrl" alt="@File.Description"/>
        }
        else if (File.ContentType.StartsWith("audio"))
        {
            <Icon Name="Icons.FileAudio" Size="5em"/>
        }
        else if (File.ContentType.StartsWith("video"))
        {
            <Icon Name="Icons.FileVideo" Size="5em"/>
        }
        else
        {
            <Icon Name="Icons.File" Size="5em"/>
        }
        <span>@File.Filename</span>
        <Menu @ref="FileMenu">
            <MenuElement Icon="Icons.ArrowSquareOut" OnSelect="OpenFile">
                <Text>@Loc["Open"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.Share" OnSelect="CopyFileLink">
                <Text>@Loc["Copy link"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.CursorText" OnSelect="RenameFile">
                <Text>@Loc["Rename"]</Text>
            </MenuElement>
            @if (File.Sensitive)
            {
                <MenuElement Icon="Icons.Eye" OnSelect="MarkFileNotSensitive">
                    <Text>@Loc["Mark as not sensitive"]</Text>
                </MenuElement>
            }
            else
            {
                <MenuElement Icon="Icons.EyeSlash" OnSelect="MarkFileAsSensitive">
                    <Text>@Loc["Mark as sensitive"]</Text>
                </MenuElement>
            }
            <MenuElement Icon="Icons.ClosedCaptioning" OnSelect="SetFileAltText">
                <Text>@Loc["Set alt text"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.FolderDashed" OnSelect="MoveFile">
                <Text>@Loc["Move"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.Trash" OnSelect="DeleteFile">
                <Text>@Loc["Delete"]</Text>
            </MenuElement>
            <ClosingBackdrop OnClose="FileMenu.Close"></ClosingBackdrop>
        </Menu>
    </div>
}
@if (Folder != null && File == null)
{
    <div @ref="FolderButton" class="drive-entry" @onclick="SelectFolder" @onclick:stopPropagation="true">
        <Icon Name="Icons.FolderOpen" Size="5em" Pack="IconStyle.Fill"/>
        <span>@Folder.Name</span>
        <Menu @ref="FolderMenu">
            <MenuElement Icon="Icons.FolderOpen" OnSelect="OpenFolder">
                <Text>@Loc["Open"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.CursorText" OnSelect="RenameFolder">
                <Text>@Loc["Rename"]</Text>
            </MenuElement>
            <MenuElement Icon="Icons.FolderDashed" OnSelect="MoveFolder">
                <Text>@Loc["Move"]</Text>
            </MenuElement>
            <ClosingBackdrop OnClose="FolderMenu.Close"></ClosingBackdrop>
        </Menu>
    </div>
}

@code {
    [Parameter] public DriveFileResponse?   File         { get; set; } = null;
    [Parameter] public DriveFolderResponse? Folder       { get; set; } = null;
    private            Menu                 FileMenu     { get; set; } = null!;
    private            Menu                 FolderMenu   { get; set; } = null!;
    private            ElementReference     FileButton   { get; set; }
    private            ElementReference     FolderButton { get; set; }

    [Parameter, EditorRequired] public required List<DriveFolderResponse> FolderList { get; set; }

    private void SelectFile() => FileMenu.Toggle(FileButton);

    private async Task RenameFile()
    {
        var filename = await Js.InvokeAsync<string?>("prompt", "Rename file", File!.Filename);
        if (string.IsNullOrWhiteSpace(filename)) return;

        try
        {
            var res = await Api.Drive.UpdateFileAsync(File!.Id, new UpdateDriveFileRequest { Filename = filename.Trim() });
            if (res != null)
            {
                File.Filename = res.Filename;
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            await Js.InvokeVoidAsync("alert", e.Response.Message);
        }
    }

    private async Task MarkFileSensitive(bool sensitive)
    {
        var res = await Api.Drive.UpdateFileAsync(File!.Id, new UpdateDriveFileRequest { Sensitive = sensitive});
        if (res != null)
        {
            File.Sensitive = res.Sensitive;
            StateHasChanged();
        }
    }

    private async Task MarkFileNotSensitive() => await MarkFileSensitive(false);

    private async Task MarkFileAsSensitive() => await MarkFileSensitive(true);

    private async Task SetFileAltText()
    {
        var alt = await Js.InvokeAsync<string?>("prompt", "Set alt text", File!.Description ?? "");
        if (alt == null) return;

        var res = await Api.Drive.UpdateFileAsync(File!.Id, new UpdateDriveFileRequest { Description = string.IsNullOrWhiteSpace(alt) ? null : alt.Trim() });
        if (res != null)
        {
            File.Description = res.Description;
            StateHasChanged();
        }
    }

    private async Task MoveFile()
    {
        // TODO: Move this to a proper prompt dialog once we have that
        var folderId = await Js.InvokeAsync<string?>("prompt", "Move to folder by ID: " + string.Join(", ", FolderList.Select(p => $"{p.Name} ({p.Id})")) + " or blank for root");
        if (folderId == null) return;

        try
        {
            var res = await Api.Drive.UpdateFileParentAsync(File!.Id, string.IsNullOrWhiteSpace(folderId) ? null : folderId.Trim());
            if (res != null)
            {
                File = null;
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            await Js.InvokeVoidAsync("alert", e.Response.Message);
        }
    }

    private void OpenFile() => Js.InvokeVoidAsync("open", File!.Url, "_blank");

    private void CopyFileLink() => Js.InvokeVoidAsync("navigator.clipboard.writeText", File!.Url);

    private async Task DeleteFile()
    {
        await Api.Drive.DeleteFileAsync(File!.Id);
        File = null;
        StateHasChanged();
    }

    private void SelectFolder() => FolderMenu.Toggle(FolderButton);

    private async Task RenameFolder()
    {
        if (Folder is not { Id: not null, Name: not null }) return;

        var name = await Js.InvokeAsync<string?>("prompt", "Rename folder", Folder.Name);
        if (string.IsNullOrWhiteSpace(name)) return;

        try
        {
            var res = await Api.Drive.UpdateFolderAsync(Folder.Id, name.Trim());
            if (res != null)
            {
                Folder.Name = res.Name;
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            await Js.InvokeVoidAsync("alert", e.Response.Message);
        }
    }

    private async Task MoveFolder()
    {
        if (Folder is not { Id: not null, Name: not null }) return;

        // TODO: Move this to a proper prompt dialog once we have that
        var folderId = await Js.InvokeAsync<string?>("prompt", "Move to folder by ID: " + string.Join(", ", FolderList.FindAll(p => p.Id != Folder.Id).Select(p => $"{p.Name} ({p.Id})")) + " or blank for root");
        if (folderId == null) return;

        try
        {
            var res = await Api.Drive.UpdateFolderParentAsync(Folder.Id, string.IsNullOrWhiteSpace(folderId) ? null : folderId.Trim());
            if (res != null)
            {
                Folder = null;
                StateHasChanged();
            }
        }
        catch (ApiException e)
        {
            await Js.InvokeVoidAsync("alert", e.Response.Message);
        }
    }

    private void OpenFolder() => Nav.NavigateTo($"/drive/{Folder!.Id}");
}